#!/usr/bin/perl -w
use strict;
use warnings;

#verificar se o argumento tem param
if (@ARGV !=2 ){
  die("paramentros invalidos \n");
 }

if (! -f $ARGV[0]){
 die("p1 - não é ficheiro \n");
 }

if ( -e $ARGV[1]){
  die("p2 - ficheiro já existe \n");
 }

my $fichin = $ARGV[0];
my $fichout = $ARGV[1];

open(FICHIN , "<$fichin" )|| die ("ERRO IN de abertura de leitura:$!\n");
##  my @fich = <FICHIN>;
open(FICHOUT , ">$fichout" )|| die ("ERRO OUT de abertura de leitura:$!\n");

    my $linha = <FICHIN>;
    while($linha ne "") {
          print FICHOUT $linha;
          $linha= <FICHIN>;
    };

close(FICHIN);
close(FICHOUT);

#####
#!/usr/bin/perl -w
use strict;
use warnings;
#ordenaçao de arrays

my @arr =(1,10,50,3,100,20,7,15);
my @arr1 =(1, "estg", 100, "ipleira",2,"Leiria",3);

my @arr_ord = sort(@arr);
#ordena em formato ascii
print ("@arr_ord \n");

my @arr_num = sort{$a <=> $b} @arr;
#ordenar em formato  numerica
print("@arr_num \n");

push(@arr_ord,300);#acescenta no fim
print ("@arr_ord \n");

my $var = pop(@arr_ord);
#retira o ultimo  elemento
print ("@arr_ord  var=$var \n");

unshift(@arr_ord, 123);
#acrescenta no inicio
print ("@arr_ord \n");

$var = shift(@arr_ord);
#retira o primeiro  elemento
print ("@arr_ord  var=$var \n");

#############
#!/usr/bin/perl -w
use strict;
use warnings;

my @fich =`cat /etc/passwd `;
print ("@fich \n");

my @fich1 =`cat /etc/passwd | cut -f1 -d":" | sort `;
my $ne = length(@fich1);
my $ne1 = @fich1;
print ("@fich1 \n\n $ne \n\n\ $ne1 \n ");
